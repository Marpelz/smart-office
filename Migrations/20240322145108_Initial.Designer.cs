// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartOffice;

#nullable disable

namespace SmartOffice.Migrations
{
    [DbContext(typeof(SmartOfficeDbContext))]
    [Migration("20240322145108_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SmartOffice.Models.MenuModels.DishModel", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Dish_ID");

                    b.Property<string>("DishAdditionalOptions")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Dish_Additional_Options");

                    b.Property<string>("DishCategory")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Dish_Category");

                    b.Property<string>("DishContents")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Dish_Contents");

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Dish_Name");

                    b.Property<string>("DishNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Dish_Number");

                    b.Property<decimal>("DishPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Dish_Price");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("DishId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("DishesTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.OrderModels.OrderDetailsModel", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserPaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("DishId")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "UserId", "UserPaymentMethodId", "DishId");

                    b.HasIndex("DishId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPaymentMethodId");

                    b.ToTable("OrderDetailsTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.OrderModels.OrderModel", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Order_ID");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("Order_Date");

                    b.HasKey("OrderId");

                    b.ToTable("OrdersTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.RestaurantModels.RestaurantAddressModel", b =>
                {
                    b.Property<int>("RestaurantAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Restaurant_Address_ID");

                    b.Property<string>("RestaurantHouseNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_House_Number");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("RestaurantStreet")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_Street");

                    b.Property<int>("RestaurantZipCodeCityId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantAddressId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("RestaurantZipCodeCityId");

                    b.ToTable("RestaurantAddressesTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.RestaurantModels.RestaurantModel", b =>
                {
                    b.Property<int>("RestaurantId")
                        .HasColumnType("int")
                        .HasColumnName("Restaurant_ID");

                    b.Property<string>("RestaurantDeliveryAvailability")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_Delivery_Availability");

                    b.Property<decimal>("RestaurantDeliveryCosts")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Restaurant_Delivery_Costs");

                    b.Property<string>("RestaurantLieferandoLink")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_Lieferando_Link");

                    b.Property<decimal>("RestaurantMinimumOrderAmount")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Restaurant_Minimum_Order_Amount");

                    b.Property<string>("RestaurantName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_Name");

                    b.Property<string>("RestaurantOrderingMethodAppPhone")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_Ordering_Method_App_Phone");

                    b.Property<string>("RestaurantPhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_Phone_Number");

                    b.Property<string>("RestaurantType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_Type");

                    b.HasKey("RestaurantId");

                    b.ToTable("RestaurantsTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.RestaurantModels.RestaurantOpeningAndDeliveryTimeModel", b =>
                {
                    b.Property<int>("RestaurantTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Restaurant_Time_ID");

                    b.Property<string>("DeliveryTimeFrom")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Delivery_Time_From");

                    b.Property<string>("OpeningTimeFriday")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Opening_Time_Friday");

                    b.Property<string>("OpeningTimeMonday")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Opening_Time_Monday");

                    b.Property<string>("OpeningTimeSaturday")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Opening_Time_Saturday");

                    b.Property<string>("OpeningTimeSunday")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Opening_Time_Sunday");

                    b.Property<string>("OpeningTimeThursday")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Opening_Time_Thursday");

                    b.Property<string>("OpeningTimeTuesday")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Opening_Time_Tuesday");

                    b.Property<string>("OpeningTimeWednesday")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Opening_Time_Wednesday");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantTimeId");

                    b.ToTable("RestaurantOpeningAndDeliveryTimesTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.RestaurantModels.ZipCodeCityModel", b =>
                {
                    b.Property<int>("ZipCodeCityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Restaurant_Zip_Code_City_ID");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_City");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Restaurant_Postal_Code");

                    b.HasKey("ZipCodeCityId");

                    b.ToTable("ZipCodeCitiesTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.UserModels.PaymentMethodModel", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Payment_Method_ID");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Payment_Method");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethodsTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.UserModels.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext")
                        .HasColumnName("User_Name");

                    b.Property<string>("UserPassword")
                        .HasColumnType("longtext")
                        .HasColumnName("User_Password");

                    b.HasKey("UserId");

                    b.ToTable("UserTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.UserModels.UserPaymentMethodModel", b =>
                {
                    b.Property<int>("UserPaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_Payment_Method_ID");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserPaymentMethodAdditive")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("User_Payment_Method_Additive");

                    b.HasKey("UserPaymentMethodId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPaymentMethodTab", (string)null);
                });

            modelBuilder.Entity("SmartOffice.Models.MenuModels.DishModel", b =>
                {
                    b.HasOne("SmartOffice.Models.RestaurantModels.RestaurantModel", "Restaurant")
                        .WithMany("Dishes")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("SmartOffice.Models.OrderModels.OrderDetailsModel", b =>
                {
                    b.HasOne("SmartOffice.Models.MenuModels.DishModel", "Dish")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOffice.Models.OrderModels.OrderModel", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOffice.Models.UserModels.UserModel", "User")
                        .WithMany("OrderDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOffice.Models.UserModels.UserPaymentMethodModel", "UserPaymentMethod")
                        .WithMany("OrderDetails")
                        .HasForeignKey("UserPaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");

                    b.Navigation("User");

                    b.Navigation("UserPaymentMethod");
                });

            modelBuilder.Entity("SmartOffice.Models.RestaurantModels.RestaurantAddressModel", b =>
                {
                    b.HasOne("SmartOffice.Models.RestaurantModels.RestaurantModel", "Restaurant")
                        .WithMany("RestaurantAddresses")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOffice.Models.RestaurantModels.ZipCodeCityModel", "ZipCodeCity")
                        .WithMany("RestaurantAddresses")
                        .HasForeignKey("RestaurantZipCodeCityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("ZipCodeCity");
                });

            modelBuilder.Entity("SmartOffice.Models.RestaurantModels.RestaurantModel", b =>
                {
                    b.HasOne("SmartOffice.Models.RestaurantModels.RestaurantOpeningAndDeliveryTimeModel", "RestaurantOpeningAndDeliveryTime")
                        .WithOne("Restaurant")
                        .HasForeignKey("SmartOffice.Models.RestaurantModels.RestaurantModel", "RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestaurantOpeningAndDeliveryTime");
                });

            modelBuilder.Entity("SmartOffice.Models.UserModels.UserPaymentMethodModel", b =>
                {
                    b.HasOne("SmartOffice.Models.UserModels.PaymentMethodModel", "PaymentMethod")
                        .WithMany("UserPaymentMethods")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOffice.Models.UserModels.UserModel", "User")
                        .WithMany("UserPaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartOffice.Models.MenuModels.DishModel", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SmartOffice.Models.OrderModels.OrderModel", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SmartOffice.Models.RestaurantModels.RestaurantModel", b =>
                {
                    b.Navigation("Dishes");

                    b.Navigation("RestaurantAddresses");
                });

            modelBuilder.Entity("SmartOffice.Models.RestaurantModels.RestaurantOpeningAndDeliveryTimeModel", b =>
                {
                    b.Navigation("Restaurant")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartOffice.Models.RestaurantModels.ZipCodeCityModel", b =>
                {
                    b.Navigation("RestaurantAddresses");
                });

            modelBuilder.Entity("SmartOffice.Models.UserModels.PaymentMethodModel", b =>
                {
                    b.Navigation("UserPaymentMethods");
                });

            modelBuilder.Entity("SmartOffice.Models.UserModels.UserModel", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("UserPaymentMethods");
                });

            modelBuilder.Entity("SmartOffice.Models.UserModels.UserPaymentMethodModel", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
